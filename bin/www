#!/usr/bin/env node

/**
 * Module dependencies.
 */

/*
 var mongoose = require('mongoose');
 mongoose.connect('mongodb://localhost/test');

 var db = mongoose.connection;
 db.on('error', console.error.bind(console, 'connection error:'));
 db.once('open', function() {
 console.log('connect!');
 });


 var kittySchema = mongoose.Schema({
 name: String
 });

 var Kitten = mongoose.model('Kitten', kittySchema);
 /*
 var silence = new Kitten({ name: 'Silence' });
 console.log(silence.name); // 'Silence'

 silence.save(function (err, silence) {
 if (err) return console.error(err);
 console.log(silence.name);
 });

var query = Kitten.find({name: 'Silence'});
query.exec(function (err, docs) {
    console.log(docs);
});

*/

var app = require('../app');
var debug = require('debug')('mapson:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
